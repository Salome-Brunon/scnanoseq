/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}

//
// Read QC options and trimming options
//

if (!params.skip_fastqc) {
    process {
        withName: '.*:FASTQC_NANOPLOT_PRE_TRIM:FASTQC' {
            publishDir = [
                path: { "${params.outdir}/fastqc/pre_trim" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

        withName: '.*:FASTQC_NANOPLOT_POST_TRIM:FASTQC' {
            publishDir = [
                path: { "${params.outdir}/fastqc/post_trim" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

        withName: '.*:FASTQC_NANOPLOT_PRE_EXTRACTED:FASTQC' {
            publishDir = [
                path: { "${params.outdir}/fastqc/pre_extracted" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

        withName: '.*:FASTQC_NANOPLOT_POST_EXTRACT:FASTQC' {
            publishDir = [
                path: { "${params.outdir}/fastqc/post_extract" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

    }
}

if (!params.skip_nanoplot) {
    process {
        withName: '.*:FASTQC_NANOPLOT_PRE_TRIM:NANOPLOT' {
            publishDir = [
                path: { "${params.outdir}/nanoplot/pre_trim/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

        withName: '.*:FASTQC_NANOPLOT_POST_TRIM:NANOPLOT' {
            publishDir = [
                path: { "${params.outdir}/nanoplot/post_trim/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

        withName: '.*:FASTQC_NANOPLOT_PRE_EXTRACTED:NANOPLOT' {
            publishDir = [
                path: { "${params.outdir}/nanoplot/pre_extracted/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

        withName: '.*:FASTQC_NANOPLOT_POST_EXTRACT:NANOPLOT' {
            publishDir = [
                path: { "${params.outdir}/nanoplot/post_extract/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

    }
}

if (!params.skip_trimming) {
    process {
        withName:'NANOFILT' {
            ext.args = "-l ${params.min_length} -q ${params.min_q_score}"
            publishDir = [
                path: { "${params.outdir}/fastq/trimmed_nanofilt" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName:'PROWLERTRIMMER' {
            ext.args = "-l ${params.min_length} -q ${params.min_q_score} -w 100"
            publishDir = [
                path: { "${params.outdir}/fastq/trimmed_prowlertrimmer" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

/////////////////////////
/// CREATE_REGEX_INFO ///
/////////////////////////

process {
    withName: '.*:CREATE_REGEX_INFO:CREATE_REGEX' {
        publishDir = [
            path: { "${params.outdir}/references/regex_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

if (params.intron_retention_method == "1"){

    //////////////////////////
    /// TRANSCRIPT_TO_EXON ///
    //////////////////////////
    
    process {
        withName: '.*:TRANSCRIPT_TO_EXON' {
            publishDir = [
                path: { "${params.outdir}/references/gtf/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
} else if (params.intron_retention_method == "2"){

    ////////////////
    /// SORT_GTF ///
    ////////////////
    
    process {
        withName: '.*:SORT_GTF' {
            publishDir = [
                enabled: false
            ]
        }
    }
    
    /////////////////////
    /// SORT_EXON_GTF ///
    /////////////////////
    
    process {
        withName: '.*:SORT_EXON_GTF' {
            publishDir = [
                enabled: false
            ]
        }
    }
    
    /////////////////////
    /// SORT_BEDTOOLS ///
    /////////////////////
    
    process {
        withName: '.*:SORT_BEDTOOLS' {
            publishDir = [
                enabled: false
            ]
        }
    }
    
    ////////////////////////
    /// GET_GTF_FEATURES ///
    ////////////////////////
    
    process {
        withName: '.*:GET_GTF_FEATURES' {
            publishDir = [
                enabled: false
            ]
        }
    }
    
    ///////////////
    /// GTF2BED ///
    ///////////////
    
    process {
        withName: '.*:GTF2BED' {
            publishDir = [
                enabled: false
            ]
        }
    }
    
    //////////////////////////
    /// UCSC_BEDTOGENEPRED ///
    //////////////////////////
    
    process {
        withName: '.*:UCSC_BEDTOGENEPRED' {
            publishDir = [
                enabled: false
            ]
        }
    }
    
    //////////////////////////
    /// UCSC_GENEPREDTOGTF ///
    //////////////////////////
    
    process {
        withName: '.*:UCSC_GENEPREDTOGTF' {
            publishDir = [
                enabled: false
            ]
        }
    }
    
    ////////////////////////////
    /// CUSTOM_GETCHROMSIZES ///
    ////////////////////////////
    
    process {
        withName: '.*:CUSTOM_GETCHROMSIZES' {
            publishDir = [
                enabled: false
            ]
        }
    }
    
    //////////////////////
    /// COMPLEMENT_GTF ///
    //////////////////////
    
    process {
        withName: '.*:COMPLEMENT_GTF' {
            publishDir = [
                enabled: false
            ]
        }
    }
    
    ////////////////////////////
    /// COMPLEMENT_NONINTRON ///
    ////////////////////////////
    
    process {
        withName: '.*:COMPLEMENT_NONINTRON' {
            publishDir = [
                enabled: false
            ]
        }
    }
    
    ///////////////
    /// CAT_BED ///
    ///////////////
    
    process {
        withName: '.*:CAT_BED' {
            publishDir = [
                enabled: false
            ]
        }
    }
    
    ///////////////
    /// CAT_GTF ///
    ///////////////
    process {
        withName: '.*:CAT_GTF' {
            publishDir = [
                path: { "${params.outdir}/references/gtf/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

//////////////////
/// SPLIT_FILE ///
//////////////////

process {
    withName: 'SPLIT_FILE' {
        publishDir = [
            enabled: false
        ]
    }
}

////////////
/// PIGZ ///
////////////

process {
    withName: 'ZIP_TRIM' {
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName: 'ZIP_R1' {
        publishDir = [
            path: { "${params.outdir}/fastq/pre_extract/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName: 'ZIP_R2' {
        publishDir = [
            path: { "${params.outdir}/fastq/pre_extract/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

////////////////////
/// INTRON 1 GTF ///
////////////////////

process {
    withName: 'TRANSCRIPT_TO_EXON' {
        publishDir = [
            path: { "${params.outdir}/references/gtf_intron_1" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

////////////////////////
/// PREEXTRACT_FASTQ ///
////////////////////////

process {
    withName: 'PREEXTRACT_FASTQ' {
        publishDir = [
            enabled: false
        ]
    }
}

///////////////////////////
/// UMI_TOOLS_WHITELIST ///
///////////////////////////

process {
    withName: 'UMI_TOOLS_WHITELIST' {
        ext.args = "--temp-dir=$LOCAL_SCRATCH"
        publishDir = [
            path: { "${params.outdir}/whitelist/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

/////////////////////////
/// UMI_TOOLS_EXTRACT ///
/////////////////////////

process {
    withName: 'UMI_TOOLS_EXTRACT' {
        ext.args = "--temp-dir=$LOCAL_SCRATCH"
        publishDir = [
            path: { "${params.outdir}/fastq/extracted/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// Mapping index and alignment options
//

// TODO: "reverse" may not be the best description of ub...;
// maybe just go by directRNA/cDNA protocol choice or both
if (!params.skip_save_minimap2_index) {
    process {
        withName:'MINIMAP2_INDEX' {
            ext.args = {
                [
                    "-ax splice",
                    params.stranded == "forward" ? "-uf" : params.stranded == "reverse" ? "-ub" : "-un",
                    "-k${params.kmer_size}",
                    params.save_secondary_alignment == false ? "--secondary=no " : "--secondary=yes "
                ].join(' ').trim()
            }
        }
    }
}

process {
    withName:'MINIMAP2_ALIGN' {
        ext.args = {
            [
                "--MD -ax splice",
                params.stranded == "forward" ? "-uf" : params.stranded == "reverse" ? "-ub" : "-un",
                "-k${params.kmer_size}",
                params.save_secondary_alignment == false ? "--secondary=no " : "--secondary=yes "
            ].join(' ').trim()
        }
    }
}

//
// Samtools
//

//////////////////
/// SAM to BAM ///
//////////////////

// TODO: make output tmp ; again for now keeping it on for tests
process {
    withName:'SAMTOOLS_VIEW_BAM' {
        ext.args = "-h --output-fmt bam"
        publishDir = [
            path: { "${params.outdir}/minimap2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

///////////////////////////
/// FILTER MAPPED READS ///
///////////////////////////

process {
    withName:'SAMTOOLS_VIEW_FILTER' {
        ext.args = "-b -F 4"
        ext.prefix = { "${meta.id}.mapped_only" }
        publishDir = [
            path: { "${params.outdir}/minimap2/filtered" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//////////////////
/// SORT READS ///
//////////////////

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_MINIMAP:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/minimap2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_FILTERED:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.mapped_only.sorted" }
        publishDir = [
            path: { "${params.outdir}/minimap2/filtered" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

/////////////
/// INDEX ///
/////////////

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_MINIMAP:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/minimap2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_FILTERED:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/minimap2/filtered" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//TODO: enable (and modify where needed) indexing for dedub bams and BC corrected bams
//NOTE: since just indexing just directly calling it from the module, not subworkflow
//NOTE: <<<param_for_gene_transcript_count_matrix_placeholder>>> placeholder!
/*
// index dedub bams
if (!params.skip_dedup_umis) {
    process {
        withName:'SAMTOOLS_INDEX_DEDUB' {
            publishDir = [
                path: { "${params.outdir}/<<<param_for_gene_transcript_count_matrix_placeholder>>>" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

// index BC corrected bams (transcript and/or gene-level)

process {
    withName:'SAMTOOLS_INDEX_BC_CORRECTED' {
        publishDir = [
            path: { "${params.outdir}/<<<param_for_gene_transcript_placeholder>>>" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
*/

/////////////
/// STATS ///
/////////////
process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_MINIMAP:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS' {
        publishDir = [
            path: { "${params.outdir}/minimap2/samtools_stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_FILTERED:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS' {
        ext.prefix = { "${meta.id}.mapped_only" }
        publishDir = [
            path: { "${params.outdir}/minimap2/filtered/samtools_stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

////////////////
/// IDXSTATS ///
////////////////
process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_MINIMAP:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS' {
        publishDir = [
            path: { "${params.outdir}/minimap2/samtools_stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_FILTERED:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS' {
        ext.prefix = { "${meta.id}.mapped_only" }
        publishDir = [
            path: { "${params.outdir}/minimap2/filtered/samtools_stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

/////////////////
/// FLAGSTATS ///
/////////////////
process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_MINIMAP:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT' {
        publishDir = [
            path: { "${params.outdir}/minimap2/samtools_stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_FILTERED:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT' {
        ext.prefix = { "${meta.id}.mapped_only" }
        publishDir = [
            path: { "${params.outdir}/minimap2/filtered/samtools_stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//////////////////////////
/// REFORMAT_WHITELIST ///
//////////////////////////

process {
    withName: 'REFORMAT_WHITELIST' {
        publishDir = [
            path: { "${params.outdir}/whitelist" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

///////////////////
/// TAG_BARCODE ///
///////////////////

process {
    withName: 'TAG_BARCODES' {
        publishDir = [
            path: { "${params.outdir}/bam/tagged" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

////////////////////////
/// CORRECT_BARCODES ///
////////////////////////

process {
    withName: 'CORRECT_BARCODES' {
        publishDir = [
            path: { "${params.outdir}/bam/corrected" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName: 'SAMTOOLS_INDEX_BC_CORRECTED' {
        publishDir = [
            path: { "${params.outdir}/bam/corrected" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//////////////////////
/// UMITOOLS_DEDUP ///
//////////////////////

process {
    withName: 'UMITOOLS_DEDUP' {
        ext.prefix = { "${meta.id}.dedup" }
        publishDir = [
            path: { "${params.outdir}/bam/dedup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName: 'SAMTOOLS_INDEX_DEDUP' {
        ext.prefix = { "${meta.id}.dedup" }
        publishDir = [
            path: { "${params.outdir}/bam/dedup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

/////////////////////
/// FEATURECOUNTS ///
/////////////////////

/// GENES ///

// for all exons modes ([exon], [intron 1] and [intron 2 exons])
// for intron 2, output dir in `exon` sub-dir, for consistancy with intron outs
process {
    withName: 'SUBREAD_FEATURECOUNTS_GENE' {
        ext.args = {
            [
                "-L -O -f -R CORE -F GTF",
                params.stranded == "forward" ? "-s 1" : params.stranded == "reverse" ? "-s 2" : "-s 0",
                "-g gene_id -t exon",
            ].join(' ').trim()
        }
        publishDir = [
            path: { params.intron_retention_method == '2' ? "${params.outdir}/feature_counts/gene/exon" : "${params.outdir}/feature_counts/gene" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
    }
}

// for intron 2, we run featurecounts one additional time accounting for -t intron
process {
    withName: 'SUBREAD_FEATURECOUNTS_GENE_INTRON2' {
        ext.args = {
            [
                "-L -O -f -R CORE -F GTF",
                params.stranded == "forward" ? "-s 1" : params.stranded == "reverse" ? "-s 2" : "-s 0",
                "-g gene_id -t intron",
            ].join(' ').trim()
        }
        publishDir = [
            path: { "${params.outdir}/feature_counts/gene/intron" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
    }
}

/// TRANSCRIPTS ///

// NOTE: currently, transcript-level is executed in the same manner
// between intron methods (differece b/t intron & exon is in stringtie)
process {
    withName: 'SUBREAD_FEATURECOUNTS_TRANSCRIPT' {
        ext.args = {
            [
                "-L -O -f -R CORE -F GTF",
                params.stranded == "forward" ? "-s 1" : params.stranded == "reverse" ? "-s 2" : "-s 0",
                "-g transcript_id -t transcript --primary --fraction --extraAttributes gene_id",
            ].join(' ').trim()
        }
        publishDir = [
            path: { "${params.outdir}/feature_counts/transcript" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
    }
}
///////////////////////////
/// STRINGTIE_STRINGTIE ///
///////////////////////////

process {
    withName: 'STRINGTIE_STRINGTIE' {
        publishDir = [
            path: { "${params.outdir}/references/gtf_stringtie_stringtie" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

///////////////////////
/// STRINGTIE_MERGE ///
///////////////////////

process {
    withName: 'STRINGTIE_MERGE' {
        publishDir = [
            path: { "${params.outdir}/references/gtf_stringtie_merge" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

////////////////////
/// TAG_FEATURES ///
////////////////////

process {
    withName: '.*:TAG_FEATURES'{
        publishDir = [
            path: { "${params.outdir}/bam/feature/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//////////////////////
/// UMITOOLS_COUNT ///
/////////////////////
process {
    withName: 'UMI_TOOLS_COUNT' {
        ext.args = "--temp-dir=$LOCAL_SCRATCH"
        publishDir = [
            path: { "${params.outdir}/counts/umitools" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
