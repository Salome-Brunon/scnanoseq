/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}

//
// Read QC options and trimming options
//

if (!params.skip_fastqc) {
    process {
        withName: '.*:FASTQC_NANOPLOT_PRE_TRIM:FASTQC' {
            publishDir = [
                path: { "${params.outdir}/fastqc/pre_trim" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }
/*
        withName: '.*:FASTQC_NANOPLOT_POST_TRIM:FASTQC' {
            publishDir = [
                path: { "${params.outdir}/fastqc/post_trim" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

        withName: '.*:FASTQC_NANOPLOT_POST_EXTRACT:FASTQC' {
            publishDir = [
                path: { "${params.outdir}/fastqc/post_extract" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }
*/
    }
}

if (!params.skip_nanoplot) {
    process {
        withName: '.*:FASTQC_NANOPLOT_PRE_TRIM:NANOPLOT' {
            publishDir = [
                path: { "${params.outdir}/nanoplot/pre_trim/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }
/*
        withName: '.*:FASTQC_NANOPLOT_POST_TRIM:NANOPLOT' {
            publishDir = [
                path: { "${params.outdir}/nanoplot/post_trim/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

        withName: '.*:FASTQC_NANOPLOT_POST_EXTRACT:NANOPLOT' {
            publishDir = [
                path: { "${params.outdir}/nanoplot/post_extract/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }
*/
    }
}

if (!params.skip_trimming) {
    process {
        withName:'NANOFILT' {
            ext.args = "-l ${params.min_length} -q ${params.min_q_score}"
        }
    }

    process {
        withName:'PROWLERTRIMMER' {
            ext.args = "-l ${params.min_length} -q ${params.min_q_score} -w 100"
        }
    }
}

//
// Mapping index and alignment options
//

// TODO: "reverse" may not be the best description of ub...;
// maybe just go by directRNA/cDNA protocol choice or both
if (!params.skip_save_minimap2_index) {
    process {
        withName:'MINIMAP2_INDEX' {
            ext.args   = {
                [
                    "-ax splice",
                    params.stranded == "forward" ? "-uf" : params.stranded == "reverse" ? "-ub" : "-un",
                    "-k${params.kmer_size}",
                    params.save_secondary_alignment == false ? "--secondary=no " : "--secondary=yes "
                ].join(' ').trim()
            }
        }
    }
}

process {
    withName:'MINIMAP2_ALIGN' {
        ext.args   = {
            [
                "--MD -ax splice",
                params.stranded == "forward" ? "-uf" : params.stranded == "reverse" ? "-ub" : "-un",
                "-k${params.kmer_size}",
                params.save_secondary_alignment == false ? "--secondary=no " : "--secondary=yes "
            ].join(' ').trim()
        }
    }
}
