/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}

/////////////
// FILE QC //
/////////////

// FASTQC
if (!params.skip_qc && !params.skip_fastqc) {
    process {
        withName: '.*:FASTQC_NANOPLOT_PRE_TRIM:FASTQC' {
            ext.prefix = { "${meta.id}.raw" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/fastqc/pre_trim" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

        if (!params.skip_trimming) {
            withName: '.*:FASTQC_NANOPLOT_POST_TRIM:FASTQC' {
                ext.prefix = { "${meta.id}.trimmed" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/qc/fastqc/post_trim" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            }
        }

        withName: '.*:FASTQC_NANOPLOT_POST_EXTRACT:FASTQC' {
            ext.prefix = { "${meta.id}.extracted"}
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/fastqc/post_extract" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

    }
}

// NANOPLOT
if (!params.skip_qc && !params.skip_nanoplot) {
    process {
        withName: '.*:FASTQC_NANOPLOT_PRE_TRIM:NANOPLOT' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/nanoplot/pre_trim/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

        if (!params.skip_trimming) {
            withName: '.*:FASTQC_NANOPLOT_POST_TRIM:NANOPLOT' {
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/qc/nanoplot/post_trim/" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            }
        }

        withName: '.*:FASTQC_NANOPLOT_POST_EXTRACT:NANOPLOT' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/nanoplot/post_extract/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

    }
}

// NANOCOMP
if (!params.skip_qc && !params.skip_fastq_nanocomp) {
    process {
        withName: '.*:NANOCOMP_FASTQ' {
            publishDir = [
                path: { "${params.outdir}/batch_qcs/nanocomp/fastq" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
        }
    }
}

if (!params.skip_qc && !params.skip_bam_nanocomp) {
    process {
        withName: '.*:NANOCOMP_BAM' {
            publishDir = [
                path: { "${params.outdir}/batch_qcs/nanocomp/bam" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
        }
    }
}

// SAMTOOLS
if (!params.skip_qc){
    process {
        withName:'.*:BAM_SORT_STATS_SAMTOOLS_MINIMAP:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.minimap" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/samtools/minimap" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    
    process {
        withName:'.*:BAM_SORT_STATS_SAMTOOLS_FILTERED:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.mapped_only" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/samtools/mapped_only" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    
    process {
        withName:'.*:BAM_SORT_STATS_SAMTOOLS_CORRECTED:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.corrected" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/samtools/corrected" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    
    process {
        withName:'.*:BAM_SORT_STATS_SAMTOOLS_DEDUP:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.dedup" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/samtools/dedup" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

/////////////////////
// REFERENCE FILES //
/////////////////////

// PREPARE_REFERENCE_FILES
process {
    withName: '.*:PREPARE_REFERENCE_FILES:SAMTOOLS_FAIDX' {
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName: '.*:PREPARE_REFERENCE_FILES:PREPARE_GTF' {
        publishDir = [
            enabled: false
        ]
    }
}

// PAFTOOLS
process {
    withName: '.*:PAFTOOLS' {
        publishDir = [
            path: { "${params.outdir}/references/paftools" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            
        ]
    }
}

// CREATE_REGEX_INFO
process {
    withName: '.*:CREATE_REGEX_INFO:CREATE_REGEX' {
        publishDir = [
            path: { "${params.outdir}/references/regex_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// MINIMAP2_INDEX
if (!params.skip_save_minimap2_index) {
    process {
        withName:'.*:MINIMAP2_INDEX' {
            ext.args = {
                [
                    "-ax splice",
                    params.stranded == "forward" ? "-uf" : params.stranded == "reverse" ? "-ub" : "-un",
                    "-k${params.kmer_size}",
                    params.save_secondary_alignment == false ? "--secondary=no " : "--secondary=yes "
                ].join(' ').trim()
            }
            publishDir = [
                path: { "${params.outdir}/references/minimap_index" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

//////////////////////
// FASTQ PROCESSING //
//////////////////////

// FASTQ CONCATENATION
process {
    withName: '.*:CAT_FASTQ' {
        publishDir = [
            enabled: false
        ]
    }
}

// FASTQ TRIMMING
if (!params.skip_trimming) {
    // GUNZIP
    process {
        withName: '.*:GUNZIP' {
            publishDir = [
                enabled: false
            ]
        }
    }

    if (params.split_amount > 0){
        process {
            withName: '.*:SPLIT_FILE' {
                publishDir = [
                    enabled: false
                ]
            }
        }
    }

    // NANOFILT
    if ( params.trimming_software == 'nanofilt' ){
        process {
            withName:'.*:NANOFILT' {
                publishDir = [
                    enabled: false
                ]
            }
        }

        process {
            withName: '.*:ZIP_TRIM' {
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/fastq/trimmed_nanofilt" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }

    // PROWLERTRIMMER
    } else if (params.trimming_software == 'prowler') {

        process {
            withName:'.*:PROWLERTRIMMER' {
                publishDir = [
                    enabled: false
                ]
            }
        }

        process {
            withName: '.*:ZIP_TRIM' {
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/fastq/trimmed_prowlertrimmer" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    process {
        withName: '.*:CAT_CAT' {
            publishDir = [
                enabled: false
            ]
        }
    }
}

// PREEXTRACT_FASTQ
process {
    withName: '.*:PREEXTRACT_FASTQ' {
        publishDir = [
            enabled: false
        ]
    }
}

///////////////////////
// BARCODE DETECTION //
///////////////////////

// BLAZE
process {
    withName: '.*:BLAZE' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/blaze/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

///////////////
// ALIGNMENT //
///////////////

// MINIMAP
process {
    withName:'.*:MINIMAP2_ALIGN' {
        ext.args = {
            [
                "--MD -ax splice",
                params.stranded == "forward" ? "-uf" : params.stranded == "reverse" ? "-ub" : "-un",
                "-k${params.kmer_size}",
                params.save_secondary_alignment == false ? "--secondary=no " : "--secondary=yes "
            ].join(' ').trim()
        }
        publishDir = [
            enabled: false
        ]
    }
}

////////////////////
// BAM PROCESSING //
////////////////////

// SAMTOOLS_VIEW_BAM
process {
    withName:'.*:SAMTOOLS_VIEW_BAM' {
        ext.args = "-h --output-fmt bam"
        publishDir = [
            enabled: false
        ]
    }
}

// SAMTOOLS_VIEW_FILTER
process {
    withName:'.*:SAMTOOLS_VIEW_FILTER' {
        ext.args = "-b -F 4"
        ext.prefix = { "${meta.id}.mapped_only" }
        publishDir = [
            enabled: false
        ]
    }
}

// SAMTOOLS_SORT
process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_MINIMAP:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/original" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_FILTERED:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.mapped_only.sorted" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/mapped_only" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_CORRECTED:SAMTOOLS_SORT' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/corrected" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_DEDUP:SAMTOOLS_SORT' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/dedup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// SAMTOOLS_INDEX

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_MINIMAP:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/original" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_FILTERED:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/mapped_only" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_CORRECTED:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/corrected" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_DEDUP:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/dedup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

////////////////////////
// BARCODE CORRECTION //
////////////////////////

// TAG_BARCODES
process {
    withName: '.*:TAG_BARCODES' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/barcode_tagged" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// CORRECT_BARCODES
process {
    withName: '.*:CORRECT_BARCODES' {
        publishDir = [
            enabled: false
        ]
    }
}

///////////////////////
// UMI DEDUPLICATION //
///////////////////////

// UMITOOLS_DEDUP
process {
    withName: '.*:UMITOOLS_DEDUP' {
        ext.prefix = { "${meta.id}.dedup" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/dedup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//////////////////////////////
// INTRON RETENTION METHODS //
//////////////////////////////

if (params.intron_retention_method == "1"){

    ////////////////////////
    // TRANSCRIPT_TO_EXON //
    ////////////////////////

    process {
        withName: '.*:TRANSCRIPT_TO_EXON' {
            publishDir = [
                path: { "${params.outdir}/references/gtf/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
} else if (params.intron_retention_method == "2"){

    ///////////////////
    // SORT_BEDTOOLS //
    ///////////////////

    process {
        withName: '.*:SORT_BEDTOOLS' {
            publishDir = [
                enabled: false
            ]
        }
    }

    ///////////////////////
    // CREATE_INTRON_GTF //
    ///////////////////////

    process {
        withName: '.*:CREATE_INTRON_GTF' {
            publishDir = [
                enabled: false
            ]
        }
    }

    //////////////////////
    // GET_GTF_FEATURES //
    //////////////////////

    process {
        withName: '.*:GET_GTF_FEATURES' {
            publishDir = [
                enabled: false
            ]
        }
    }

    /////////////
    // GTF2BED //
    /////////////

    process {
        withName: '.*:GTF2BED' {
            publishDir = [
                enabled: false
            ]
        }
    }

    ////////////////////////
    // UCSC_BEDTOGENEPRED //
    ////////////////////////

    process {
        withName: '.*:UCSC_BEDTOGENEPRED' {
            publishDir = [
                enabled: false
            ]
        }
    }

    ////////////////////////
    // UCSC_GENEPREDTOGTF //
    ////////////////////////

    process {
        withName: '.*:UCSC_GENEPREDTOGTF' {
            publishDir = [
                enabled: false
            ]
        }
    }

    //////////////////////////
    // CUSTOM_GETCHROMSIZES //
    //////////////////////////

    process {
        withName: '.*:CUSTOM_GETCHROMSIZES' {
            publishDir = [
                enabled: false
            ]
        }
    }

    ////////////////////
    // COMPLEMENT_GTF //
    ////////////////////

    process {
        withName: '.*:COMPLEMENT_GTF' {
            publishDir = [
                enabled: false
            ]
        }
    }

    //////////////////////////
    // COMPLEMENT_NONINTRON //
    //////////////////////////

    process {
        withName: '.*:COMPLEMENT_NONINTRON' {
            publishDir = [
                enabled: false
            ]
        }
    }

    /////////////
    // CAT_BED //
    /////////////

    process {
        withName: '.*:CAT_BED' {
            publishDir = [
                enabled: false
            ]
        }
    }

    /////////////
    // CAT_GTF //
    /////////////
    process {
        withName: '.*:CAT_GTF' {
            publishDir = [
                path: { "${params.outdir}/references/gtf/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}




//////////////
// ISOQUANT //
//////////////

process {
    withName: '.*:ISOQUANT' {
        ext.args = {
            [
                "--complete_genedb",
                params.stranded == "forward" ? "--stranded forward" : params.stranded == "reverse" ? "--stranded reverse" : "--stranded none",
            ].join(' ').trim()
        }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/isoquant" },
            mode: params.publish_dir_mode,
            saveAs: {filename -> filename.equals('versions.yml') ? null: filename }
        ]
    }
}

///////////////
// SEURAT_QC //
///////////////

if (!params.skip_qc && !params.skip_seurat) {
    process {
        withName: '.*:SEURAT_GENE' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/seurat/gene" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName: '.*:SEURAT_TRANSCRIPT' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/seurat/transcript" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    //***TODO***: don't forget filtered outputs [here or in main workflow, need to check]
    // so outputs will need to be changed
    process {
        withName: '.*:COMBINE_SEURAT_STATS_GENE' {
            ext.args = "-o gene.corrected.tsv -f gene"
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName: '.*:COMBINE_SEURAT_STATS_TRANSCRIPT' {
            ext.args = "-o transcript.corrected.tsv -f transcript"
            publishDir = [
                enabled: false
            ]
        }
    }
}

/////////////
// MULTIQC //
/////////////

if (!params.skip_qc) {
    process {
        withName: '.*:MULTIQC_FINALQC' {
            publishDir = [
                path: { "${params.outdir}/batch_qcs/multiqc/final_qc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName: '.*:MULTIQC_RAWQC' {
            publishDir = [
                path: { "${params.outdir}/batch_qcs/multiqc/raw_qc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
